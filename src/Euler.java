public class Euler {

    public void Euler(){

    }
    // If we list all the natural numbers below 10 that are multiples
    // of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
    // Find the sum of all the multiples of 3 or 5 below 1000.
    public void problem_1(int limit){
        int acum = 0;
        for(int i = 1; i< limit; i++)
            acum = ((i % 3 == 0) || (i % 5 == 0)) ?  acum + i: acum + 0;
        System.out.println("Problem #1: R/" +acum);
    }


    //Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    // By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89...
    //By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    // find the sum of the even-valued terms.
    public void problem_2(){
        int acum = 0;
        int flag = 2;
        int fbNum = 0;
        do{
            fbNum = fibonacciRecursion(flag);
            acum = (fbNum % 2 == 0) ? acum + fbNum : acum + 0;
            flag++;
        }
        while(fbNum <= 4000000 );
        System.out.println("Problem #2: R/" +acum);
    }

    public int fibonacciRecursion(int num){
        if(num == 0)
            return 0;
        if(num == 1 || num == 2)
            return 1;
        return fibonacciRecursion(num - 2) + fibonacciRecursion(num - 1);
    }
}

